--- #----------------------------------------------
#----------------------------------------------
# TODO:
#   Fix "if" conditions in each job, feels redundant.
#   There is alot of replication of steps here since Github actions seems limited.
name: edbook
on:
  push:
    paths-ignore:
      - "**/README.md"
    branches-ignore:
      - master
  pull_request:
    branches:
      - master
    types: [closed]
env:
  DEFAULT_BRANCH: master
jobs:
  setup:
    name: Setup and build
    runs-on: ubuntu-20.04
    outputs:
      foundation-artifact: ${{ steps.zip_build.outputs.foundation-artifact }}
      analysis-1-artifact: ${{ steps.zip_build.outputs.analysis-1-artifact }}
      branch_name: ${{ steps.extract_branch.outputs.branch_name }}
    steps:
      #----------------------------------------------
      # check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      #----------------------------------------------
      # install & configure poetry
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      # load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        run: poetry install
        if: steps.cached_poetry_dependencies.outputs.cache-hit != 'true'
      #----------------------------------------------
      # Build
      #----------------------------------------------
      - name: build
        run: |
          ls -alR projects
          source .venv/bin/activate
          sphinx-build -c ${{ github.workspace }}/projects/foundation/ ${{ github.workspace }}/projects/foundation/ ${{ github.workspace }}/artifacts/foundation_build
          sphinx-build -c ${{ github.workspace }}/projects/analysis_1/ ${{ github.workspace }}/projects/analysis_1/ ${{ github.workspace }}/artifacts/analysis_1_build
          ls -al ${{ github.workspace }}/artifacts
      - name: zip-build
        id: zip_build
        # Use zip instead of tar to support non-tech users that want to download the artifact
        run: |
          echo ${{ github.workspace }}
          ls ${{ github.workspace }}/artifacts
          export BUILD_PREFIX=build-${{ runner.os }}
          export BUILD_HASH=${{ hashFiles('artifacts') }}
          echo ${BUILD_HASH}
          zip -r "${BUILD_PREFIX}-${BUILD_HASH}" artifacts/*
          ls -al ${{ github.workspace }}
      #----------------------------------------------
      # Store current branch name as output for reuse as dir name on remote host
      #----------------------------------------------
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          echo "::set-output name=branch_name::$(echo ${GITHUB_REF#refs/heads/})"
          ls -al artifacts
      #----------------------------------------------
      # Upload build artifact
      #----------------------------------------------
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: "*.zip"

  tag-and-release:
    needs: setup
    name: Tag and release
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Bump version and push tag
        id: bump_version
        uses: anothrNick/github-tag-action@1.26.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch
      #----------------------------------------------
      # Get build artifact from build job
      #----------------------------------------------
      - name: Get build artifact
        uses: actions/download-artifact@v2
        with:
          name: artifacts
      - name: debug
        run: |
          ls -al .

      #----------------------------------------------
      # zip build artifact
      #----------------------------------------------
      - name: Create pre-release
        if: needs.setup.outputs.branch_name != 'master'
        id: create_prerelease
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.new_tag }}
          release_name: ${{ steps.bump_version.outputs.new_tag }}
          draft: false
          prerelease: true
      - name: Create release
        if: needs.setup.outputs.branch_name == 'master'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.new_tag }}
          release_name: ${{ steps.bump_version.outputs.new_tag }}
          draft: false
          prerelease: false
      - name: Upload pre-release asset
        if: needs.setup.outputs.branch_name != 'master'
        id: upload_prerelease_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_prerelease.outputs.upload_url }}
          asset_path: artifacts/*
          asset_name: build-${{ steps.bump_version.outputs.tag }}.zip
          asset_content_type: application/zip
      - name: Upload release asset
        if: needs.setup.outputs.branch_name == 'master'
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "*.zip"
          asset_name: build-${{ steps.bump_version.outputs.tag }}.zip
          asset_content_type: application/zip
  deploy-feature-branch:
    needs: [setup, tag-and-release]
    if: needs.setup.outputs.branch_name != 'master'
    name: Deploy feature branch
    runs-on: ubuntu-20.04
    steps:
      #----------------------------------------------
      # Get build artifact from setup job
      #----------------------------------------------
      - name: Get build artifact
        uses: actions/download-artifact@v2
        with:
          name: artifacts
      #----------------------------------------------
      # Unzip to comply with scp-action
      #----------------------------------------------
      - name: Unzip build
        run: |
          unzip artifacts/foundation/* && rm artifacts/foundation/*.zip
          unzip artifacts/analysis_1/* && rm artifacts/analysis_1/*.zip
      #----------------------------------------------
      # Delete dir on remote server, upload build tar and extract on remote server.
      #----------------------------------------------
      - name: Deploy foundation docs
        id: deploy_foundation_docs
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.HI_USERNAME }}
          password: ${{ secrets.HI_PASSWORD }}
          port: 22
          rm: true
          source: artifacts/foundation
          target: ".public_html/staging/undirbuningur_stae/${{ needs.setup.outputs.branch_name }}"
      - name: Deploy analysis-1 docs
        id: deploy_analysis_1_docs
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.HI_USERNAME }}
          password: ${{ secrets.HI_PASSWORD }}
          port: 22
          rm: true
          source: artifacts/analysis_1
          target: ".public_html/staging/greining-1/${{ needs.setup.outputs.branch_name }}"
  deploy-production-branch:
    if: needs.setup.outputs.branch_name == 'master'
    needs: [setup, tag-and-release]
    name: Deploy production branch
    runs-on: ubuntu-20.04
    steps:
      #----------------------------------------------
      # Get build artifact from build job
      #----------------------------------------------
      - name: Get build artifact
        uses: actions/download-artifact@v2
        with:
          name: artifacts
      #----------------------------------------------
      # Unzip to comply with scp-action
      #----------------------------------------------
      - name: Unzip build
        run: |
          unzip artifacts/foundation/* && rm artifacts/foundation/*.zip
          unzip artifacts/analysis_1/* && rm artifacts/analysis_1/*.zip
      - name: Cleanup and deploy production
        id: cleanup_deploy_production
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.HI_USERNAME }}
          password: ${{ secrets.HI_PASSWORD }}
          port: 22
          rm: true
          source: artifacts/foundation
          target: ".public_html/production/undirbuningur_stae/${{ needs.setup.outputs.branch_name }}"
