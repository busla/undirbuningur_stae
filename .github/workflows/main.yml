#----------------------------------------------
# TODO:
#   Fix "if" conditions in each job, feels redundant.
#   There is alot of replication of steps here since Github actions seems limited.
#   Consider CircleCI.
#   Cache Poetry bin so it can be reused between jobs instead of installing.
#----------------------------------------------
name: edbook
on:
  push:
    paths-ignore:
      - "**/README.md"
    branches-ignore:
      - master
  pull_request:
    branches:
      - master
    types: [closed]
env:
  DEFAULT_BRANCH: master
  BASE_URL_STAGING: https://notendur.hi.is/jlg2/staging/edbook
  BASE_URL_PRODUCTION: https://notendur.hi.is/jlg2/production/edbook
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-20.04
    steps:
      #----------------------------------------------
      # check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      #----------------------------------------------
      # install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      # load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached_poetry_dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        run: poetry install
        if: steps.cached_poetry_dependencies.outputs.cache-hit != 'true'
  build:
    needs: setup
    name: Build
    runs-on: ubuntu-20.04
    outputs:
      branch_name: ${{steps.extract_branch.outputs.branch_name}}
    steps:
      #----------------------------------------------
      # check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      #----------------------------------------------
      # install & configure poetry
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      # load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached_poetry_dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # load cached build if cache exists
      #----------------------------------------------
      - name: Load cached build
        id: cached_build
        uses: actions/cache@v2
        with:
          path: _build
          key: build-${{ runner.os }}-${{ hashFiles('docs') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached_poetry_dependencies.outputs.cache-hit != 'true'
        run: poetry install
      #----------------------------------------------
      # Build undirbuningur_stae
      #----------------------------------------------
      - name: build
        if: steps.cached_build.outputs.cached_build.cache-hit != 'true'
        run: |
          source .venv/bin/activate
          poetry run hicli build
      #----------------------------------------------
      # Store current branch name as output for reuse as dir name on remote host
      #----------------------------------------------
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "::set-output name=branch_name::$(echo ${GITHUB_REF#refs/heads/})"
  tag-and-release:
    if: github.event.pull_request.merged == true && needs.build.outputs.branch_name == 'master'
    needs: build
    name: Tag and release
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Bump version and push tag
        id: bump_version
        uses: anothrNick/github-tag-action@1.26.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch
      #----------------------------------------------
      # Cache should always exist.
      #----------------------------------------------
      - name: Load cached build
        id: cached_build
        uses: actions/cache@v2
        with:
          path: _build
          key: build-${{ runner.os }}-${{ hashFiles('_build') }}
      - run: zip -r build _build
        name: Zip build output
      - run: ls .
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.new_tag }}
          release_name: ${{ steps.bump_version.outputs.new_tag }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build.zip
          asset_name: build-${{ steps.bump_version.outputs.new_tag }}.zip
          asset_content_type: application/zip
  deploy-feature-branch:
    if: ${{needs.build.outputs.branch_name != 'master'}}
    needs: build
    name: Deploy feature branch
    runs-on: ubuntu-20.04
    steps:
      #----------------------------------------------
      # Cache should always exist.
      #----------------------------------------------
      - name: Load cached build
        id: cached_build
        uses: actions/cache@v2
        with:
          path: _build
          key: build-${{ runner.os }}-${{ hashFiles('_build') }}
      #----------------------------------------------
      # Delete dir on remote server, upload build tar and extract on remote server.
      #----------------------------------------------
      - name: Cleanup and deploy feature
        id: cleanup_deploy_feature
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.PRODUCTION_HI_USERNAME }}
          password: ${{ secrets.PRODUCTION_HI_PASSWORD }}
          port: 22
          rm: true
          source: _build
          target: ".public_html/staging/edbook/${{ needs.build.outputs.branch_name }}"
      - name: URL output
        id: url_output
        run: echo "Visit ${{ env.BASE_URL_STAGING }}/${{ needs.build.outputs.branch_name }}/_build/html"
  deploy-production-branch:
    if: ${{needs.build.outputs.branch_name == 'master'}}
    needs: [build, tag-and-release]
    name: Deploy production branch
    runs-on: ubuntu-20.04
    steps:
      #----------------------------------------------
      # Cache should always exist.
      #----------------------------------------------
      - name: Load cached build
        id: cached_build
        uses: actions/cache@v2
        with:
          path: _build
          key: build-${{ runner.os }}-${{ hashFiles('docs') }}
      - name: Cleanup and deploy production
        id: cleanup_deploy_production
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.PRODUCTION_HI_USERNAME }}
          password: ${{ secrets.PRODUCTION_HI_PASSWORD }}
          port: 22
          rm: true
          source: _build
          target: ".public_html/production/edbook/${{ needs.build.outputs.branch_name }}"

